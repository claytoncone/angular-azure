/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { __decorate, __param } from "tslib";
import { Inject, Injectable } from "@angular/core";
import { UserAgentApplication, UrlUtils } from "msal";
import { Router } from "@angular/router";
import { BroadcastService } from "./broadcast.service";
import { MSALError } from "./MSALError";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
import { Minimatch } from "minimatch";
const buildMsalConfig = (config) => {
    return Object.assign(Object.assign({}, config), { framework: Object.assign(Object.assign({}, config.framework), { isAngular: true }) });
};
const ɵ0 = buildMsalConfig;
let MsalService = class MsalService extends UserAgentApplication {
    constructor(msalConfig, msalAngularConfig, router, broadcastService) {
        super(buildMsalConfig(msalConfig));
        this.msalConfig = msalConfig;
        this.msalAngularConfig = msalAngularConfig;
        this.router = router;
        this.broadcastService = broadcastService;
        window.addEventListener("msal:popUpHashChanged", () => {
            this.getLogger().verbose("popUpHashChanged ");
        });
        window.addEventListener("msal:popUpClosed", (e) => {
            const errorParts = e.detail.split("|");
            const msalError = new MSALError(errorParts[0], errorParts[1]);
            if (this.getLoginInProgress()) {
                broadcastService.broadcast("msal:loginFailure", msalError);
                this.setloginInProgress(false);
            }
            else if (this.getAcquireTokenInProgress()) {
                broadcastService.broadcast("msal:acquireTokenFailure", msalError);
                this.setAcquireTokenInProgress(false);
            }
        });
    }
    loginPopup(request) {
        return super.loginPopup(request)
            .then((authResponse) => {
            this.broadcastService.broadcast("msal:loginSuccess", authResponse);
            return authResponse;
        })
            .catch((error) => {
            this.broadcastService.broadcast("msal:loginFailure", error);
            this.getLogger().error("Error during login:\n" + error.errorMessage);
            throw error;
        });
    }
    ssoSilent(request) {
        return super.ssoSilent(request)
            .then((authResponse) => {
            this.broadcastService.broadcast("msal:ssoSuccess", authResponse);
            return authResponse;
        })
            .catch((error) => {
            this.broadcastService.broadcast("msal:ssoFailure", error);
            this.getLogger().error("Error during login:\n" + error.errorMessage);
            throw error;
        });
    }
    acquireTokenSilent(request) {
        return super.acquireTokenSilent(request)
            .then((authResponse) => {
            this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
            return authResponse;
        })
            .catch((error) => {
            this.broadcastService.broadcast("msal:acquireTokenFailure", error);
            this.getLogger().error("Error when acquiring token for scopes: " + request.scopes + " " + error);
            throw error;
        });
    }
    acquireTokenPopup(request) {
        return super.acquireTokenPopup(request)
            .then((authResponse) => {
            this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
            return authResponse;
        })
            .catch((error) => {
            this.broadcastService.broadcast("msal:acquireTokenFailure", error);
            this.getLogger().error("Error when acquiring token for scopes : " + request.scopes + " " + error);
            throw error;
        });
    }
    handleRedirectCallback(authOrTokenCallback, errorReceivedCallback) {
        super.handleRedirectCallback((authError, authResponse) => {
            if (authError) {
                if (!this.getAccount()) {
                    this.broadcastService.broadcast("msal:loginFailure", authError);
                }
                else {
                    this.broadcastService.broadcast("msal:acquireTokenFailure", authError);
                }
                if (errorReceivedCallback) {
                    errorReceivedCallback(authError, authResponse.accountState);
                }
                else {
                    authOrTokenCallback(authError, authResponse);
                }
            }
            else if (authResponse) {
                if (authResponse.tokenType === "id_token") {
                    this.broadcastService.broadcast("msal:loginSuccess", authResponse);
                }
                else {
                    this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
                }
                if (errorReceivedCallback) {
                    authOrTokenCallback(authResponse);
                }
                else {
                    authOrTokenCallback(null, authResponse);
                }
            }
        });
    }
    clearCacheForScope(accessToken) {
        return super.clearCacheForScope(accessToken);
    }
    getScopesForEndpoint(endpoint) {
        if ((this.msalConfig.framework && this.msalConfig.framework.unprotectedResources) || (this.msalAngularConfig && this.msalAngularConfig.unprotectedResources)) {
            this.getLogger().info("unprotectedResources is deprecated and ignored. msalAngularConfig.protectedResourceMap now supports glob patterns");
        }
        const frameworkProtectedResourceMap = this.msalConfig.framework && this.msalConfig.framework.protectedResourceMap;
        if (frameworkProtectedResourceMap) {
            this.getLogger().info("msalConfig.framework.protectedResourceMap is deprecated, use msalAngularConfig.protectedResourceMap");
        }
        const protectedResourceMap = frameworkProtectedResourceMap && frameworkProtectedResourceMap.size ? frameworkProtectedResourceMap : new Map(this.msalAngularConfig.protectedResourceMap);
        const protectedResourcesArray = Array.from(protectedResourceMap.keys());
        const keyMatchesEndpointArray = protectedResourcesArray.filter(key => {
            const minimatch = new Minimatch(key);
            return minimatch.match(endpoint) || endpoint.indexOf(key) > -1;
        });
        // process all protected resources and send the first matched resource
        if (keyMatchesEndpointArray.length > 0) {
            if (keyMatchesEndpointArray.length > 1) {
                this.getLogger().warning("Multiple entries in protectedResourceMap found for resource. Using first entry.");
                this.getLogger().warningPii(`Multiple entries found for: ${endpoint}`);
            }
            const keyForEndpoint = keyMatchesEndpointArray[0];
            if (keyForEndpoint) {
                return protectedResourceMap.get(keyForEndpoint);
            }
        }
        /*
         * default resource will be clientid if nothing specified
         * App will use idtoken for calls to itself
         * check if it's staring from http or https, needs to match with app host
         */
        if (endpoint.indexOf("http://") > -1 || endpoint.indexOf("https://") > -1) {
            if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(super.getRedirectUri())) {
                return new Array(this.msalConfig.auth.clientId);
            }
        }
        else {
            /*
             * in angular level, the url for $http interceptor call could be relative url,
             * if it's relative call, we'll treat it as app backend call.
             */
            return new Array(this.msalConfig.auth.clientId);
        }
        // if not the app's own backend or not a domain listed in the endpoints structure
        return null;
    }
};
MsalService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG_ANGULAR,] }] },
    { type: Router },
    { type: BroadcastService }
];
MsalService = __decorate([
    Injectable(),
    __param(0, Inject(MSAL_CONFIG)),
    __param(1, Inject(MSAL_CONFIG_ANGULAR))
], MsalService);
export { MsalService };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,