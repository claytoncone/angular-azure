/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { __assign, __decorate, __extends, __param } from "tslib";
import { Inject, Injectable } from "@angular/core";
import { UserAgentApplication, UrlUtils } from "msal";
import { Router } from "@angular/router";
import { BroadcastService } from "./broadcast.service";
import { MSALError } from "./MSALError";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
import { Minimatch } from "minimatch";
var buildMsalConfig = function (config) {
    return __assign(__assign({}, config), { framework: __assign(__assign({}, config.framework), { isAngular: true }) });
};
var ɵ0 = buildMsalConfig;
var MsalService = /** @class */ (function (_super) {
    __extends(MsalService, _super);
    function MsalService(msalConfig, msalAngularConfig, router, broadcastService) {
        var _this = _super.call(this, buildMsalConfig(msalConfig)) || this;
        _this.msalConfig = msalConfig;
        _this.msalAngularConfig = msalAngularConfig;
        _this.router = router;
        _this.broadcastService = broadcastService;
        window.addEventListener("msal:popUpHashChanged", function () {
            _this.getLogger().verbose("popUpHashChanged ");
        });
        window.addEventListener("msal:popUpClosed", function (e) {
            var errorParts = e.detail.split("|");
            var msalError = new MSALError(errorParts[0], errorParts[1]);
            if (_this.getLoginInProgress()) {
                broadcastService.broadcast("msal:loginFailure", msalError);
                _this.setloginInProgress(false);
            }
            else if (_this.getAcquireTokenInProgress()) {
                broadcastService.broadcast("msal:acquireTokenFailure", msalError);
                _this.setAcquireTokenInProgress(false);
            }
        });
        return _this;
    }
    MsalService.prototype.loginPopup = function (request) {
        var _this = this;
        return _super.prototype.loginPopup.call(this, request)
            .then(function (authResponse) {
            _this.broadcastService.broadcast("msal:loginSuccess", authResponse);
            return authResponse;
        })
            .catch(function (error) {
            _this.broadcastService.broadcast("msal:loginFailure", error);
            _this.getLogger().error("Error during login:\n" + error.errorMessage);
            throw error;
        });
    };
    MsalService.prototype.ssoSilent = function (request) {
        var _this = this;
        return _super.prototype.ssoSilent.call(this, request)
            .then(function (authResponse) {
            _this.broadcastService.broadcast("msal:ssoSuccess", authResponse);
            return authResponse;
        })
            .catch(function (error) {
            _this.broadcastService.broadcast("msal:ssoFailure", error);
            _this.getLogger().error("Error during login:\n" + error.errorMessage);
            throw error;
        });
    };
    MsalService.prototype.acquireTokenSilent = function (request) {
        var _this = this;
        return _super.prototype.acquireTokenSilent.call(this, request)
            .then(function (authResponse) {
            _this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
            return authResponse;
        })
            .catch(function (error) {
            _this.broadcastService.broadcast("msal:acquireTokenFailure", error);
            _this.getLogger().error("Error when acquiring token for scopes: " + request.scopes + " " + error);
            throw error;
        });
    };
    MsalService.prototype.acquireTokenPopup = function (request) {
        var _this = this;
        return _super.prototype.acquireTokenPopup.call(this, request)
            .then(function (authResponse) {
            _this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
            return authResponse;
        })
            .catch(function (error) {
            _this.broadcastService.broadcast("msal:acquireTokenFailure", error);
            _this.getLogger().error("Error when acquiring token for scopes : " + request.scopes + " " + error);
            throw error;
        });
    };
    MsalService.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {
        var _this = this;
        _super.prototype.handleRedirectCallback.call(this, function (authError, authResponse) {
            if (authError) {
                if (!_this.getAccount()) {
                    _this.broadcastService.broadcast("msal:loginFailure", authError);
                }
                else {
                    _this.broadcastService.broadcast("msal:acquireTokenFailure", authError);
                }
                if (errorReceivedCallback) {
                    errorReceivedCallback(authError, authResponse.accountState);
                }
                else {
                    authOrTokenCallback(authError, authResponse);
                }
            }
            else if (authResponse) {
                if (authResponse.tokenType === "id_token") {
                    _this.broadcastService.broadcast("msal:loginSuccess", authResponse);
                }
                else {
                    _this.broadcastService.broadcast("msal:acquireTokenSuccess", authResponse);
                }
                if (errorReceivedCallback) {
                    authOrTokenCallback(authResponse);
                }
                else {
                    authOrTokenCallback(null, authResponse);
                }
            }
        });
    };
    MsalService.prototype.clearCacheForScope = function (accessToken) {
        return _super.prototype.clearCacheForScope.call(this, accessToken);
    };
    MsalService.prototype.getScopesForEndpoint = function (endpoint) {
        if ((this.msalConfig.framework && this.msalConfig.framework.unprotectedResources) || (this.msalAngularConfig && this.msalAngularConfig.unprotectedResources)) {
            this.getLogger().info("unprotectedResources is deprecated and ignored. msalAngularConfig.protectedResourceMap now supports glob patterns");
        }
        var frameworkProtectedResourceMap = this.msalConfig.framework && this.msalConfig.framework.protectedResourceMap;
        if (frameworkProtectedResourceMap) {
            this.getLogger().info("msalConfig.framework.protectedResourceMap is deprecated, use msalAngularConfig.protectedResourceMap");
        }
        var protectedResourceMap = frameworkProtectedResourceMap && frameworkProtectedResourceMap.size ? frameworkProtectedResourceMap : new Map(this.msalAngularConfig.protectedResourceMap);
        var protectedResourcesArray = Array.from(protectedResourceMap.keys());
        var keyMatchesEndpointArray = protectedResourcesArray.filter(function (key) {
            var minimatch = new Minimatch(key);
            return minimatch.match(endpoint) || endpoint.indexOf(key) > -1;
        });
        // process all protected resources and send the first matched resource
        if (keyMatchesEndpointArray.length > 0) {
            if (keyMatchesEndpointArray.length > 1) {
                this.getLogger().warning("Multiple entries in protectedResourceMap found for resource. Using first entry.");
                this.getLogger().warningPii("Multiple entries found for: " + endpoint);
            }
            var keyForEndpoint = keyMatchesEndpointArray[0];
            if (keyForEndpoint) {
                return protectedResourceMap.get(keyForEndpoint);
            }
        }
        /*
         * default resource will be clientid if nothing specified
         * App will use idtoken for calls to itself
         * check if it's staring from http or https, needs to match with app host
         */
        if (endpoint.indexOf("http://") > -1 || endpoint.indexOf("https://") > -1) {
            if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(_super.prototype.getRedirectUri.call(this))) {
                return new Array(this.msalConfig.auth.clientId);
            }
        }
        else {
            /*
             * in angular level, the url for $http interceptor call could be relative url,
             * if it's relative call, we'll treat it as app backend call.
             */
            return new Array(this.msalConfig.auth.clientId);
        }
        // if not the app's own backend or not a domain listed in the endpoints structure
        return null;
    };
    MsalService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG_ANGULAR,] }] },
        { type: Router },
        { type: BroadcastService }
    ]; };
    MsalService = __decorate([
        Injectable(),
        __param(0, Inject(MSAL_CONFIG)),
        __param(1, Inject(MSAL_CONFIG_ANGULAR))
    ], MsalService);
    return MsalService;
}(UserAgentApplication));
export { MsalService };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,