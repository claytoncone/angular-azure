/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { __decorate } from "tslib";
import { NgModule } from "@angular/core";
import { CommonModule } from "@angular/common";
import { MsalService } from "./msal.service";
import { MsalGuard } from "./msal-guard.service";
import { BroadcastService } from "./broadcast.service";
import { defaultMsalAngularConfiguration } from "./msal-angular.configuration";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
var MsalModule = /** @class */ (function () {
    function MsalModule() {
    }
    MsalModule_1 = MsalModule;
    MsalModule.forRoot = function (config, angularConfig) {
        if (angularConfig === void 0) { angularConfig = defaultMsalAngularConfiguration; }
        return {
            ngModule: MsalModule_1,
            providers: [
                {
                    provide: MSAL_CONFIG,
                    useValue: config
                },
                {
                    provide: MSAL_CONFIG_ANGULAR,
                    useValue: angularConfig
                },
                MsalService
            ]
        };
    };
    var MsalModule_1;
    MsalModule = MsalModule_1 = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [],
            providers: [MsalGuard, BroadcastService],
        })
    ], MsalModule);
    return MsalModule;
}());
export { MsalModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXp1cmUvbXNhbC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL21zYWwubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQTRCLCtCQUErQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDekcsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQVMvRDtJQUFBO0lBcUJBLENBQUM7bUJBckJZLFVBQVU7SUFDWixrQkFBTyxHQUFkLFVBQ0ksTUFBcUIsRUFDckIsYUFBeUU7UUFBekUsOEJBQUEsRUFBQSwrQ0FBeUU7UUFFekUsT0FBTztZQUNILFFBQVEsRUFBRSxZQUFVO1lBQ3BCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLE1BQU07aUJBQ25CO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxtQkFBbUI7b0JBQzVCLFFBQVEsRUFBRSxhQUFhO2lCQUMxQjtnQkFDRCxXQUFXO2FBQ2Q7U0FDSixDQUFDO0lBQ04sQ0FBQzs7SUFuQlEsVUFBVTtRQVB0QixRQUFRLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDdkIsWUFBWSxFQUFFLEVBRWI7WUFDRCxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUM7U0FDM0MsQ0FBQztPQUNXLFVBQVUsQ0FxQnRCO0lBQUQsaUJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQXJCWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcclxuaW1wb3J0IHsgTXNhbFNlcnZpY2UgfSBmcm9tIFwiLi9tc2FsLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgTXNhbEd1YXJkIH0gZnJvbSBcIi4vbXNhbC1ndWFyZC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEJyb2FkY2FzdFNlcnZpY2UgfSBmcm9tIFwiLi9icm9hZGNhc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSBcIm1zYWxcIjtcclxuaW1wb3J0IHsgTXNhbEFuZ3VsYXJDb25maWd1cmF0aW9uLCBkZWZhdWx0TXNhbEFuZ3VsYXJDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4vbXNhbC1hbmd1bGFyLmNvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgTVNBTF9DT05GSUcsIE1TQUxfQ09ORklHX0FOR1VMQVIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG5cclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtNc2FsR3VhcmQsIEJyb2FkY2FzdFNlcnZpY2VdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTXNhbE1vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdChcclxuICAgICAgICBjb25maWc6IENvbmZpZ3VyYXRpb24sXHJcbiAgICAgICAgYW5ndWxhckNvbmZpZzogTXNhbEFuZ3VsYXJDb25maWd1cmF0aW9uID0gZGVmYXVsdE1zYWxBbmd1bGFyQ29uZmlndXJhdGlvblxyXG4gICAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxNc2FsTW9kdWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IE1zYWxNb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IE1TQUxfQ09ORklHLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiBjb25maWdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTVNBTF9DT05GSUdfQU5HVUxBUixcclxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogYW5ndWxhckNvbmZpZ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIE1zYWxTZXJ2aWNlXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIl19