/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { __awaiter, __decorate, __generator, __param } from "tslib";
import { Inject, Injectable } from "@angular/core";
import { ActivatedRoute, ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, } from "@angular/router";
import { MsalService } from "./msal.service";
import { Location, PlatformLocation } from "@angular/common";
import { BroadcastService } from "./broadcast.service";
import { InteractionRequiredAuthError, UrlUtils, WindowUtils } from "msal";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
var MsalGuard = /** @class */ (function () {
    function MsalGuard(msalConfig, msalAngularConfig, authService, router, activatedRoute, location, platformLocation, broadcastService) {
        this.msalConfig = msalConfig;
        this.msalAngularConfig = msalAngularConfig;
        this.authService = authService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.location = location;
        this.platformLocation = platformLocation;
        this.broadcastService = broadcastService;
    }
    /**
     * Builds the absolute url for the destination page
     * @param path Relative path of requested page
     * @returns Full destination url
     */
    MsalGuard.prototype.getDestinationUrl = function (path) {
        // Absolute base url for the application (default to origin if base element not present)
        var baseElements = document.getElementsByTagName("base");
        var baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);
        // Path of page (including hash, if using hash routing)
        var pathUrl = this.location.prepareExternalUrl(path);
        // Hash location strategy
        if (pathUrl.startsWith("#")) {
            return baseUrl + "/" + pathUrl;
        }
        /*
         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).
         * Since baseUrl also includes /base, can just concatentate baseUrl + path
         */
        return "" + baseUrl + path;
    };
    /**
     * Interactively prompt the user to login
     * @param url Path of the requested page
     */
    MsalGuard.prototype.loginInteractively = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var redirectStartPage;
            return __generator(this, function (_a) {
                if (this.msalAngularConfig.popUp) {
                    return [2 /*return*/, this.authService.loginPopup({
                            scopes: this.msalAngularConfig.consentScopes,
                            extraQueryParameters: this.msalAngularConfig.extraQueryParameters
                        })
                            .then(function () { return true; })
                            .catch(function () { return false; })];
                }
                redirectStartPage = this.getDestinationUrl(url);
                this.authService.loginRedirect({
                    redirectStartPage: redirectStartPage,
                    scopes: this.msalAngularConfig.consentScopes,
                    extraQueryParameters: this.msalAngularConfig.extraQueryParameters
                });
                return [2 /*return*/];
            });
        });
    };
    MsalGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        this.authService.getLogger().verbose("location change event from old url to new url");
        /*
         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,
         * short-circuit to prevent redirecting or popups.
         */
        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {
            this.authService.getLogger().warning("redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.");
            return false;
        }
        if (!this.authService.getAccount()) {
            return this.loginInteractively(state.url);
        }
        return this.authService.acquireTokenSilent({
            scopes: [this.msalConfig.auth.clientId]
        })
            .then(function () { return true; })
            .catch(function (error) {
            if (InteractionRequiredAuthError.isInteractionRequiredError(error.errorCode)) {
                _this.authService.getLogger().info("Interaction required error in MSAL Guard, prompting for interaction.");
                return _this.loginInteractively(state.url);
            }
            _this.authService.getLogger().error("Non-interaction error in MSAL Guard: " + error.errorMessage);
            throw error;
        });
    };
    MsalGuard.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG_ANGULAR,] }] },
        { type: MsalService },
        { type: Router },
        { type: ActivatedRoute },
        { type: Location },
        { type: PlatformLocation },
        { type: BroadcastService }
    ]; };
    MsalGuard = __decorate([
        Injectable(),
        __param(0, Inject(MSAL_CONFIG)),
        __param(1, Inject(MSAL_CONFIG_ANGULAR))
    ], MsalGuard);
    return MsalGuard;
}());
export { MsalGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF6dXJlL21zYWwtYW5ndWxhci8iLCJzb3VyY2VzIjpbInNyYy9tc2FsLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFDSCxjQUFjLEVBQ2Qsc0JBQXNCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFDM0MsbUJBQW1CLEdBQ3RCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQTRCLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUcvRDtJQUVJLG1CQUNpQyxVQUF5QixFQUNqQixpQkFBMkMsRUFDeEUsV0FBd0IsRUFDeEIsTUFBYyxFQUNkLGNBQThCLEVBQzlCLFFBQWtCLEVBQ2xCLGdCQUFrQyxFQUNsQyxnQkFBa0M7UUFQYixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ2pCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDeEUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUMz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QUFDLElBQUksQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO2dCQUMxRyxPQUFPLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDN0M7WUFFRCxLQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBd0MsS0FBSyxDQUFDLFlBQWMsQ0FBQyxDQUFDO1lBQ2pHLE1BQU0sS0FBSyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7Z0RBdkZJLE1BQU0sU0FBQyxXQUFXO2dEQUNsQixNQUFNLFNBQUMsbUJBQW1CO2dCQUNOLFdBQVc7Z0JBQ2hCLE1BQU07Z0JBQ0UsY0FBYztnQkFDcEIsUUFBUTtnQkFDQSxnQkFBZ0I7Z0JBQ2hCLGdCQUFnQjs7SUFWckMsU0FBUztRQURyQixVQUFVLEVBQUU7UUFJSixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNuQixXQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO09BSnZCLFNBQVMsQ0E0RnJCO0lBQUQsZ0JBQUM7Q0FBQSxBQTVGRCxJQTRGQztTQTVGWSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1xyXG4gICAgQWN0aXZhdGVkUm91dGUsXHJcbiAgICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSwgUm91dGVyLFxyXG4gICAgUm91dGVyU3RhdGVTbmFwc2hvdCxcclxufSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IE1zYWxTZXJ2aWNlIH0gZnJvbSBcIi4vbXNhbC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IExvY2F0aW9uLCBQbGF0Zm9ybUxvY2F0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBCcm9hZGNhc3RTZXJ2aWNlIH0gZnJvbSBcIi4vYnJvYWRjYXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiwgQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBVcmxVdGlscywgV2luZG93VXRpbHMgfSBmcm9tIFwibXNhbFwiO1xyXG5pbXBvcnQgeyBNc2FsQW5ndWxhckNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi9tc2FsLWFuZ3VsYXIuY29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBNU0FMX0NPTkZJRywgTVNBTF9DT05GSUdfQU5HVUxBUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTXNhbEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoTVNBTF9DT05GSUcpIHByaXZhdGUgbXNhbENvbmZpZzogQ29uZmlndXJhdGlvbixcclxuICAgICAgICBASW5qZWN0KE1TQUxfQ09ORklHX0FOR1VMQVIpIHByaXZhdGUgbXNhbEFuZ3VsYXJDb25maWc6IE1zYWxBbmd1bGFyQ29uZmlndXJhdGlvbixcclxuICAgICAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBNc2FsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxyXG4gICAgICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgICAgIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uLFxyXG4gICAgICAgIHByaXZhdGUgcGxhdGZvcm1Mb2NhdGlvbjogUGxhdGZvcm1Mb2NhdGlvbixcclxuICAgICAgICBwcml2YXRlIGJyb2FkY2FzdFNlcnZpY2U6IEJyb2FkY2FzdFNlcnZpY2VcclxuICAgICkge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkcyB0aGUgYWJzb2x1dGUgdXJsIGZvciB0aGUgZGVzdGluYXRpb24gcGFnZVxyXG4gICAgICogQHBhcmFtIHBhdGggUmVsYXRpdmUgcGF0aCBvZiByZXF1ZXN0ZWQgcGFnZVxyXG4gICAgICogQHJldHVybnMgRnVsbCBkZXN0aW5hdGlvbiB1cmxcclxuICAgICAqL1xyXG4gICAgZ2V0RGVzdGluYXRpb25VcmwocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBBYnNvbHV0ZSBiYXNlIHVybCBmb3IgdGhlIGFwcGxpY2F0aW9uIChkZWZhdWx0IHRvIG9yaWdpbiBpZiBiYXNlIGVsZW1lbnQgbm90IHByZXNlbnQpXHJcbiAgICAgICAgY29uc3QgYmFzZUVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJiYXNlXCIpO1xyXG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLmxvY2F0aW9uLm5vcm1hbGl6ZShiYXNlRWxlbWVudHMubGVuZ3RoID8gYmFzZUVsZW1lbnRzWzBdLmhyZWYgOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcclxuXHJcbiAgICAgICAgLy8gUGF0aCBvZiBwYWdlIChpbmNsdWRpbmcgaGFzaCwgaWYgdXNpbmcgaGFzaCByb3V0aW5nKVxyXG4gICAgICAgIGNvbnN0IHBhdGhVcmwgPSB0aGlzLmxvY2F0aW9uLnByZXBhcmVFeHRlcm5hbFVybChwYXRoKTtcclxuXHJcbiAgICAgICAgLy8gSGFzaCBsb2NhdGlvbiBzdHJhdGVneVxyXG4gICAgICAgIGlmIChwYXRoVXJsLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtiYXNlVXJsfS8ke3BhdGhVcmx9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogSWYgdXNpbmcgcGF0aCBsb2NhdGlvbiBzdHJhdGVneSwgcGF0aFVybCB3aWxsIGluY2x1ZGUgdGhlIHJlbGF0aXZlIHBvcnRpb24gb2YgdGhlIGJhc2UgcGF0aCAoZS5nLiAvYmFzZS9wYWdlKS5cclxuICAgICAgICAgKiBTaW5jZSBiYXNlVXJsIGFsc28gaW5jbHVkZXMgL2Jhc2UsIGNhbiBqdXN0IGNvbmNhdGVudGF0ZSBiYXNlVXJsICsgcGF0aFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJldHVybiBgJHtiYXNlVXJsfSR7cGF0aH1gO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJhY3RpdmVseSBwcm9tcHQgdGhlIHVzZXIgdG8gbG9naW5cclxuICAgICAqIEBwYXJhbSB1cmwgUGF0aCBvZiB0aGUgcmVxdWVzdGVkIHBhZ2VcclxuICAgICAqL1xyXG4gICAgYXN5bmMgbG9naW5JbnRlcmFjdGl2ZWx5KHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXNhbEFuZ3VsYXJDb25maWcucG9wVXApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2UubG9naW5Qb3B1cCh7XHJcbiAgICAgICAgICAgICAgICBzY29wZXM6IHRoaXMubXNhbEFuZ3VsYXJDb25maWcuY29uc2VudFNjb3BlcyxcclxuICAgICAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiB0aGlzLm1zYWxBbmd1bGFyQ29uZmlnLmV4dHJhUXVlcnlQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZGlyZWN0U3RhcnRQYWdlID0gdGhpcy5nZXREZXN0aW5hdGlvblVybCh1cmwpO1xyXG5cclxuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLmxvZ2luUmVkaXJlY3Qoe1xyXG4gICAgICAgICAgICByZWRpcmVjdFN0YXJ0UGFnZSxcclxuICAgICAgICAgICAgc2NvcGVzOiB0aGlzLm1zYWxBbmd1bGFyQ29uZmlnLmNvbnNlbnRTY29wZXMsXHJcbiAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiB0aGlzLm1zYWxBbmd1bGFyQ29uZmlnLmV4dHJhUXVlcnlQYXJhbWV0ZXJzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHRoaXMuYXV0aFNlcnZpY2UuZ2V0TG9nZ2VyKCkudmVyYm9zZShcImxvY2F0aW9uIGNoYW5nZSBldmVudCBmcm9tIG9sZCB1cmwgdG8gbmV3IHVybFwiKTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJZiBhIHBhZ2Ugd2l0aCBNU0FMIEd1YXJkIGlzIHNldCBhcyB0aGUgcmVkaXJlY3QgZm9yIGFjcXVpcmVUb2tlblNpbGVudCxcclxuICAgICAgICAgKiBzaG9ydC1jaXJjdWl0IHRvIHByZXZlbnQgcmVkaXJlY3Rpbmcgb3IgcG9wdXBzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChVcmxVdGlscy51cmxDb250YWluc0hhc2god2luZG93LmxvY2F0aW9uLmhhc2gpICYmIFdpbmRvd1V0aWxzLmlzSW5JZnJhbWUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLmdldExvZ2dlcigpLndhcm5pbmcoXCJyZWRpcmVjdFVyaSBzZXQgdG8gcGFnZSB3aXRoIE1TQUwgR3VhcmQuIEl0IGlzIHJlY29tbWVuZGVkIHRvIG5vdCBzZXQgcmVkaXJlY3RVcmkgdG8gYSBwYWdlIHRoYXQgcmVxdWlyZXMgYXV0aGVudGljYXRpb24uXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYXV0aFNlcnZpY2UuZ2V0QWNjb3VudCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvZ2luSW50ZXJhY3RpdmVseShzdGF0ZS51cmwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2UuYWNxdWlyZVRva2VuU2lsZW50KHtcclxuICAgICAgICAgICAgc2NvcGVzOiBbdGhpcy5tc2FsQ29uZmlnLmF1dGguY2xpZW50SWRdXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcjogQXV0aEVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvci5pc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvcihlcnJvci5lcnJvckNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5nZXRMb2dnZXIoKS5pbmZvKFwiSW50ZXJhY3Rpb24gcmVxdWlyZWQgZXJyb3IgaW4gTVNBTCBHdWFyZCwgcHJvbXB0aW5nIGZvciBpbnRlcmFjdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9naW5JbnRlcmFjdGl2ZWx5KHN0YXRlLnVybCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5nZXRMb2dnZXIoKS5lcnJvcihgTm9uLWludGVyYWN0aW9uIGVycm9yIGluIE1TQUwgR3VhcmQ6ICR7ZXJyb3IuZXJyb3JNZXNzYWdlfWApO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=